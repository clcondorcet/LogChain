---
name: test-network
version: 1.0.0
client:
  organization: Org1
  logging:
    level: info
  peer:
    timeout:
      connection: 10s
      response: 180s
      discovery:
        greylistExpiry: 10s
  eventService:
    timeout:
      connection: 15s
      registrationResponse: 15s
  orderer:
    timeout:
      connection: 15s
      response: 15s
  connection:
    timeout:
      peer:
        endorser: '300'
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256
  tlsCerts:

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      key:
        path: /mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key
      cert:
        path: /mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt

organizations:
  Org1:
    mspid: Org1MSP
    cryptoPath: /mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/msp
    peers:
    - peer0.org1.example.com
    certificateAuthorities:
    - ca.org1.example.com
  Org2:
    mspid: Org2MSP
    cryptoPath: /mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/msp
    peers:
    - peer0.org2.example.com
    certificateAuthorities:
    - ca.org2.example.com
peers:
  peer0.org1.example.com:
    url: localhost:7051
    eventUrl: localhost:7053
    tlsCACerts:
      path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"
          
    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      hostnameOverride: peer0.org1.example.com
  peer0.org2.example.com:
    url: grpcs://localhost:9051
    tlsCACerts:
      path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem"
          
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      hostnameOverride: peer0.org2.example.com
certificateAuthorities:
  ca.org1.example.com:
    url: http://localhost:7054
    caName: ca-org1
    tlsCACerts:
      path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem"
      client:
        key:
          path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key"
        cert:
          path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt"
    registrar:
      enrollId: admin
      enrollSecret: adminpw

    httpOptions:
      verify: false
  ca.org2.example.com:
    url: http://localhost:8054
    caName: ca-org2
    tlsCACerts:
      path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem"
      client:
        key:
          path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/tls/client.key"
        cert:
          path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/tls/client.crt"
    registrar:
      enrollId: admin
      enrollSecret: adminpw

    httpOptions:
      verify: false
channels:
  logchannel:
    peers:
      peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
      peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
    policies:
      #[Optional] options for retrieving channel configuration blocks
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 1
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 5
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0
      discovery:
        maxTargets: 1
        retryOpts:
          attempts: 4
          initialBackoff: 500ms
          maxBackoff: 5s
          backoffFactor: 2.0
      eventService:
        resolverStrategy: PreferOrg
        balancer: Random
        blockHeightLagThreshold: 5
        reconnectBlockHeightLagThreshold: 10
        peerMonitorPeriod: 5s
orderers:
  orderer.example.com:
    url: localhost:7050
    # url: grpc://172.22.0.4:7050
    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      # ssl-target-name-override: orderer.kingbeefcattle.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: "/mnt/d/dev/EngineeringProj/LogChain/fabric-samples/test-network/organizations/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem"

entityMatchers:
  peer:
    - pattern: (\w*)peer0.org1.example.com(\w*)
      urlSubstitutionExp: localhost:7051
      eventUrlSubstitutionExp: localhost:7053
      sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com
      mappedHost: peer0.org1.example.com

    - pattern: (\w*)peer0.org2.example.com(\w*)
      urlSubstitutionExp: localhost:9051
      eventUrlSubstitutionExp: localhost:9053
      sslTargetOverrideUrlSubstitutionExp: peer0.org2.example.com
      mappedHost: peer0.org2.example.com

  orderer:
    - pattern: (\w*)orderer.example.com(\w*)
      urlSubstitutionExp: localhost:7050
      sslTargetOverrideUrlSubstitutionExp: orderer.example.com
      mappedHost: orderer.example.com

  certificateAuthorities:
    - pattern: (\w*)ca.org1.example.com(\w*)
      urlSubstitutionExp: http://localhost:7054
      mappedHost: ca.org1.example.com

    - pattern: (\w*)ca.org2.example.com(\w*)
      urlSubstitutionExp: http://localhost:8054
      mappedHost: ca.org2.example.com
